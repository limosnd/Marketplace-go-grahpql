package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"

	"github.com/limosnd/marketplace-go-graphql/internal/generated"
	"github.com/limosnd/marketplace-go-graphql/internal/models"
	"github.com/limosnd/marketplace-go-graphql/internal/services"
)

// ID is the resolver for the id field.
func (r *carResolver) ID(ctx context.Context, obj *models.Car) (string, error) {
	return obj.ID.Hex(), nil
}

// CreateCar is the resolver for the createCar field.
func (r *mutationResolver) CreateCar(ctx context.Context, input models.CarInput) (*models.Car, error) {
	// Convert GraphQL input to service input
	serviceInput := &services.CarInput{
		Title:        input.Title,
		Description:  input.Description,
		Brand:        input.Brand,
		Model:        input.Model,
		Year:         input.Year,
		Price:        input.Price,
		Mileage:      input.Mileage,
		Color:        input.Color,
		FuelType:     models.FuelType(input.FuelType),
		Transmission: models.TransmissionType(input.Transmission),
		Images:       input.Images,
		Location: services.LocationInput{
			City:    input.Location.City,
			State:   input.Location.State,
			Country: input.Location.Country,
			Lat:     input.Location.Lat,
			Lng:     input.Location.Lng,
		},
		Features:    input.Features,
		SellerName:  input.SellerName,
		SellerEmail: input.SellerEmail,
		SellerPhone: input.SellerPhone,
	}

	return r.CarService.CreateCar(ctx, serviceInput)
}

// UpdateCar is the resolver for the updateCar field.
func (r *mutationResolver) UpdateCar(ctx context.Context, input models.UpdateCarInput) (*models.Car, error) {
	// Convert GraphQL input to service input
	serviceInput := &services.UpdateCarInput{
		ID:           input.ID,
		Title:        input.Title,
		Description:  input.Description,
		Brand:        input.Brand,
		Model:        input.Model,
		Year:         input.Year,
		Price:        input.Price,
		Mileage:      input.Mileage,
		Color:        input.Color,
		Features:     input.Features,
	}

	if input.FuelType != nil {
		fuelType := models.FuelType(*input.FuelType)
		serviceInput.FuelType = &fuelType
	}

	if input.Transmission != nil {
		transmission := models.TransmissionType(*input.Transmission)
		serviceInput.Transmission = &transmission
	}

	if input.Status != nil {
		status := models.CarStatus(*input.Status)
		serviceInput.Status = &status
	}

	if input.Images != nil {
		serviceInput.Images = input.Images
	}

	if input.Location != nil {
		serviceInput.Location = &services.LocationInput{
			City:    input.Location.City,
			State:   input.Location.State,
			Country: input.Location.Country,
			Lat:     input.Location.Lat,
			Lng:     input.Location.Lng,
		}
	}

	return r.CarService.UpdateCar(ctx, serviceInput)
}

// DeleteCar is the resolver for the deleteCar field.
func (r *mutationResolver) DeleteCar(ctx context.Context, id string) (bool, error) {
	return r.CarService.DeleteCar(ctx, id)
}

// Cars is the resolver for the cars field.
func (r *queryResolver) Cars(ctx context.Context, filter *models.CarFilterInput, page *int, limit *int) (*models.CarsResponse, error) {
	// Set defaults
	if page == nil {
		defaultPage := 1
		page = &defaultPage
	}
	if limit == nil {
		defaultLimit := 10
		limit = &defaultLimit
	}

	// Convert GraphQL filter to service filter
	var serviceFilter *services.CarFilterInput
	if filter != nil {
		serviceFilter = &services.CarFilterInput{
			Brand:        filter.Brand,
			Model:        filter.Model,
			MinYear:      filter.MinYear,
			MaxYear:      filter.MaxYear,
			MinPrice:     filter.MinPrice,
			MaxPrice:     filter.MaxPrice,
			MinMileage:   filter.MinMileage,
			MaxMileage:   filter.MaxMileage,
			City:         filter.City,
			State:        filter.State,
		}

		if filter.FuelType != nil {
			fuelType := models.FuelType(*filter.FuelType)
			serviceFilter.FuelType = &fuelType
		}

		if filter.Transmission != nil {
			transmission := models.TransmissionType(*filter.Transmission)
			serviceFilter.Transmission = &transmission
		}
	}

	response, err := r.CarService.GetCars(ctx, serviceFilter, *page, *limit)
	if err != nil {
		return nil, err
	}

	// Convert service response to GraphQL response
	return &models.CarsResponse{
		Cars:       response.Cars,
		Total:      response.Total,
		Page:       response.Page,
		Limit:      response.Limit,
		TotalPages: response.TotalPages,
	}, nil
}

// Car is the resolver for the car field.
func (r *queryResolver) Car(ctx context.Context, id string) (*models.Car, error) {
	return r.CarService.GetCarByID(ctx, id)
}

// SearchCars is the resolver for the searchCars field.
func (r *queryResolver) SearchCars(ctx context.Context, query string, page *int, limit *int) (*models.CarsResponse, error) {
	// Set defaults
	if page == nil {
		defaultPage := 1
		page = &defaultPage
	}
	if limit == nil {
		defaultLimit := 10
		limit = &defaultLimit
	}

	response, err := r.CarService.SearchCars(ctx, query, *page, *limit)
	if err != nil {
		return nil, err
	}

	// Convert service response to GraphQL response
	return &models.CarsResponse{
		Cars:       response.Cars,
		Total:      response.Total,
		Page:       response.Page,
		Limit:      response.Limit,
		TotalPages: response.TotalPages,
	}, nil
}

// Health is the resolver for the health field.
func (r *queryResolver) Health(ctx context.Context) (string, error) {
	return "GraphQL API is healthy!", nil
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *models.User) (string, error) {
	return obj.ID.Hex(), nil
}

// Car returns generated.CarResolver implementation.
func (r *Resolver) Car() generated.CarResolver { return &carResolver{r} }

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// User returns generated.UserResolver implementation.
func (r *Resolver) User() generated.UserResolver { return &userResolver{r} }

type carResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
