package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.80

import (
	"context"
	"fmt"
	"time"
	"marketplace/backend/graph/generated"
	"marketplace/backend/graph/model"
)

// Product is the resolver for the product field.
func (r *cartItemResolver) Product(ctx context.Context, obj *model.CartItem) (*model.Product, error) {
return r.GetProductByID(obj.ProductID), nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
r.userMux.Lock()
defer r.userMux.Unlock()

user := &model.User{
ID:        r.NextID(),
Username:  input.Username,
Email:     input.Email,
CreatedAt: time.Now().Format(time.RFC3339),
}

r.users = append(r.users, user)
return user, nil
}

// CreateProduct is the resolver for the createProduct field.
func (r *mutationResolver) CreateProduct(ctx context.Context, input model.CreateProductInput) (*model.Product, error) {
r.productMux.Lock()
defer r.productMux.Unlock()

product := &model.Product{
ID:          r.NextID(),
Name:        input.Name,
Description: input.Description,
Price:       input.Price,
ImageURL:    input.ImageURL,
Category:    input.Category,
SellerID:    input.SellerID,
CreatedAt:   time.Now().Format(time.RFC3339),
}

r.products = append(r.products, product)
return product, nil
}

// AddToCart is the resolver for the addToCart field.
func (r *mutationResolver) AddToCart(ctx context.Context, input model.AddToCartInput) (*model.CartItem, error) {
	panic(fmt.Errorf("not implemented: AddToCart - addToCart"))
}

// RemoveFromCart is the resolver for the removeFromCart field.
func (r *mutationResolver) RemoveFromCart(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: RemoveFromCart - removeFromCart"))
}

// ClearCart is the resolver for the clearCart field.
func (r *mutationResolver) ClearCart(ctx context.Context, userID string) (bool, error) {
	panic(fmt.Errorf("not implemented: ClearCart - clearCart"))
}

// CreateOrder is the resolver for the createOrder field.
func (r *mutationResolver) CreateOrder(ctx context.Context, input model.CreateOrderInput) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: CreateOrder - createOrder"))
}

// UpdateOrderStatus is the resolver for the updateOrderStatus field.
func (r *mutationResolver) UpdateOrderStatus(ctx context.Context, id string, status model.OrderStatus) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: UpdateOrderStatus - updateOrderStatus"))
}

// User is the resolver for the user field.
func (r *orderResolver) User(ctx context.Context, obj *model.Order) (*model.User, error) {
	panic(fmt.Errorf("not implemented: User - user"))
}

// Product is the resolver for the product field.
func (r *orderItemResolver) Product(ctx context.Context, obj *model.OrderItem) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: Product - product"))
}

// Seller is the resolver for the seller field.
func (r *productResolver) Seller(ctx context.Context, obj *model.Product) (*model.User, error) {
	panic(fmt.Errorf("not implemented: Seller - seller"))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*model.User, error) {
r.userMux.RLock()
defer r.userMux.RUnlock()
return r.users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
return r.GetUserByID(id), nil
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*model.Product, error) {
r.productMux.RLock()
defer r.productMux.RUnlock()
return r.products, nil
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: Product - product"))
}

// ProductsByCategory is the resolver for the productsByCategory field.
func (r *queryResolver) ProductsByCategory(ctx context.Context, category string) ([]*model.Product, error) {
	panic(fmt.Errorf("not implemented: ProductsByCategory - productsByCategory"))
}

// UserCart is the resolver for the userCart field.
func (r *queryResolver) UserCart(ctx context.Context, userID string) ([]*model.CartItem, error) {
	panic(fmt.Errorf("not implemented: UserCart - userCart"))
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context) ([]*model.Order, error) {
	panic(fmt.Errorf("not implemented: Orders - orders"))
}

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context, id string) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: Order - order"))
}

// UserOrders is the resolver for the userOrders field.
func (r *queryResolver) UserOrders(ctx context.Context, userID string) ([]*model.Order, error) {
	panic(fmt.Errorf("not implemented: UserOrders - userOrders"))
}

// CartItem returns generated.CartItemResolver implementation.
func (r *Resolver) CartItem() generated.CartItemResolver { return &cartItemResolver{r} }

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Order returns generated.OrderResolver implementation.
func (r *Resolver) Order() generated.OrderResolver { return &orderResolver{r} }

// OrderItem returns generated.OrderItemResolver implementation.
func (r *Resolver) OrderItem() generated.OrderItemResolver { return &orderItemResolver{r} }

// Product returns generated.ProductResolver implementation.
func (r *Resolver) Product() generated.ProductResolver { return &productResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type cartItemResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type orderResolver struct{ *Resolver }
type orderItemResolver struct{ *Resolver }
type productResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
