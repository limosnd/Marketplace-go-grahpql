# GraphQL schema for Car Marketplace

scalar Time

# Enums
enum UserRole {
  BUYER
  SELLER
  ADMIN
}

enum FuelType {
  GASOLINE
  DIESEL
  ELECTRIC
  HYBRID
}

enum TransmissionType {
  MANUAL
  AUTOMATIC
}

enum CarStatus {
  AVAILABLE
  SOLD
  PENDING
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPING
  DELIVERED
  CANCELLED
}

# Types
type User {
  id: ID!
  name: String!
  email: String!
  phone: String
  avatar: String
  role: UserRole!
  createdAt: Time!
  updatedAt: Time!
}

type Location {
  city: String!
  state: String!
  country: String!
  lat: Float
  lng: Float
}

type Car {
  id: ID!
  title: String!
  description: String!
  brand: String!
  model: String!
  year: Int!
  price: Float!
  mileage: Int!
  color: String!
  fuelType: FuelType!
  transmission: TransmissionType!
  status: CarStatus!
  images: [String!]!
  seller: User!
  location: Location!
  features: [String!]!
  createdAt: Time!
  updatedAt: Time!
}

type Message {
  id: ID!
  fromUser: User!
  toUser: User!
  car: Car!
  content: String!
  read: Boolean!
  createdAt: Time!
}

type Favorite {
  id: ID!
  user: User!
  car: Car!
  createdAt: Time!
}

type CartItem {
  carId: ID!
  car: Car!
  quantity: Int!
  price: Float!
  addedAt: Time!
}

type Cart {
  id: ID!
  user: User!
  items: [CartItem!]!
  total: Float!
  createdAt: Time!
  updatedAt: Time!
}

type OrderItem {
  carId: ID!
  car: Car!
  quantity: Int!
  price: Float!
}

type Order {
  id: ID!
  orderNumber: String!
  buyer: User!
  items: [OrderItem!]!
  total: Float!
  status: OrderStatus!
  createdAt: Time!
  updatedAt: Time!
}

# Input Types
input RegisterInput {
  name: String!
  email: String!
  password: String!
  phone: String
  role: UserRole!
}

input LoginInput {
  email: String!
  password: String!
}

input LocationInput {
  city: String!
  state: String!
  country: String!
  lat: Float
  lng: Float
}

input CarInput {
  title: String!
  description: String!
  brand: String!
  model: String!
  year: Int!
  price: Float!
  mileage: Int!
  color: String!
  fuelType: FuelType!
  transmission: TransmissionType!
  images: [String!]!
  location: LocationInput!
  features: [String!]
}

input UpdateCarInput {
  id: ID!
  title: String
  description: String
  brand: String
  model: String
  year: Int
  price: Float
  mileage: Int
  color: String
  fuelType: FuelType
  transmission: TransmissionType
  status: CarStatus
  images: [String!]
  location: LocationInput
  features: [String!]
}

input CarFilterInput {
  brand: String
  model: String
  minYear: Int
  maxYear: Int
  minPrice: Float
  maxPrice: Float
  minMileage: Int
  maxMileage: Int
  fuelType: FuelType
  transmission: TransmissionType
  city: String
  state: String
}

input MessageInput {
  toUserId: ID!
  carId: ID!
  content: String!
}

input CartItemInput {
  carId: ID!
  quantity: Int! = 1
}

input UpdateCartItemInput {
  carId: ID!
  quantity: Int!
}

input CreateOrderInput {
  items: [CartItemInput!]!
}

# Response Types
type AuthResponse {
  token: String!
  user: User!
}

type CarsResponse {
  cars: [Car!]!
  total: Int!
  page: Int!
  limit: Int!
  totalPages: Int!
}

# Root Types
type Query {
  # User queries
  me: User
  user(id: ID!): User
  
  # Car queries
  cars(filter: CarFilterInput, page: Int = 1, limit: Int = 10): CarsResponse!
  car(id: ID!): Car
  myCars: [Car!]!
  searchCars(query: String!, page: Int = 1, limit: Int = 10): CarsResponse!
  
  # Message queries
  messages(carId: ID!): [Message!]!
  conversations: [Message!]!
  
  # Favorite queries
  myFavorites: [Car!]!
  isFavorite(carId: ID!): Boolean!
  
  # Cart queries
  myCart: Cart
  cartItemCount: Int!
  
  # Order queries
  myOrders: [Order!]!
  order(id: ID!): Order
}

type Mutation {
  # Auth mutations
  register(input: RegisterInput!): AuthResponse!
  login(input: LoginInput!): AuthResponse!
  
  # Car mutations
  createCar(input: CarInput!): Car!
  updateCar(input: UpdateCarInput!): Car!
  deleteCar(id: ID!): Boolean!
  
  # Message mutations
  sendMessage(input: MessageInput!): Message!
  markMessageAsRead(id: ID!): Message!
  
  # Favorite mutations
  addToFavorites(carId: ID!): Favorite!
  removeFromFavorites(carId: ID!): Boolean!
  
  # Cart mutations
  addToCart(input: CartItemInput!): Cart!
  updateCartItem(input: UpdateCartItemInput!): Cart!
  removeFromCart(carId: ID!): Cart!
  clearCart: Boolean!
  
  # Order mutations
  createOrder(input: CreateOrderInput!): Order!
  updateOrderStatus(orderId: ID!, status: OrderStatus!): Order!
}

type Subscription {
  messageReceived(carId: ID!): Message!
  carStatusChanged(carId: ID!): Car!
}