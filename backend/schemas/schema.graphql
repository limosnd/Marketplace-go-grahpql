# GraphQL schema for Car Marketplace

scalar Time

# Enums
enum UserRole {
  BUYER
  SELLER
  ADMIN
}

enum FuelType {
  GASOLINE
  DIESEL
  ELECTRIC
  HYBRID
}

enum TransmissionType {
  MANUAL
  AUTOMATIC
}

enum CarStatus {
  AVAILABLE
  SOLD
  PENDING
}

# Types
type User {
  id: ID!
  name: String!
  email: String!
  phone: String
  avatar: String
  role: UserRole!
  createdAt: Time!
  updatedAt: Time!
}

type Location {
  city: String!
  state: String!
  country: String!
  lat: Float
  lng: Float
}

type Car {
  id: ID!
  title: String!
  description: String!
  brand: String!
  model: String!
  year: Int!
  price: Float!
  mileage: Int!
  color: String!
  fuelType: FuelType!
  transmission: TransmissionType!
  status: CarStatus!
  images: [String!]!
  seller: User!
  location: Location!
  features: [String!]!
  createdAt: Time!
  updatedAt: Time!
}

# Input Types
input LocationInput {
  city: String!
  state: String!
  country: String!
  lat: Float
  lng: Float
}

input CarInput {
  title: String!
  description: String!
  brand: String!
  model: String!
  year: Int!
  price: Float!
  mileage: Int!
  color: String!
  fuelType: FuelType!
  transmission: TransmissionType!
  images: [String!]!
  location: LocationInput!
  features: [String!]!
  sellerName: String!
  sellerEmail: String!
  sellerPhone: String!
}

input UpdateCarInput {
  id: ID!
  title: String
  description: String
  brand: String
  model: String
  year: Int
  price: Float
  mileage: Int
  color: String
  fuelType: FuelType
  transmission: TransmissionType
  status: CarStatus
  images: [String!]
  location: LocationInput
  features: [String!]
}

input CarFilterInput {
  brand: String
  model: String
  minYear: Int
  maxYear: Int
  minPrice: Float
  maxPrice: Float
  minMileage: Int
  maxMileage: Int
  fuelType: FuelType
  transmission: TransmissionType
  city: String
  state: String
}

# Response Types
type CarsResponse {
  cars: [Car!]!
  total: Int!
  page: Int!
  limit: Int!
  totalPages: Int!
}

# Root Types
type Query {
  # Car queries
  cars(filter: CarFilterInput, page: Int = 1, limit: Int = 10): CarsResponse!
  car(id: ID!): Car
  searchCars(query: String!, page: Int = 1, limit: Int = 10): CarsResponse!
  
  # Health check
  health: String!
}

type Mutation {
  # Car mutations
  createCar(input: CarInput!): Car!
  updateCar(input: UpdateCarInput!): Car!
  deleteCar(id: ID!): Boolean!
}